diff --git a/dts/osd32mp1-nscn-u-boot.dtsi b/dts/osd32mp1-nscn-u-boot.dtsi
new file mode 100644
index 0000000000..e1bfa30586
--- /dev/null
+++ b/dts/osd32mp1-nscn-u-boot.dtsi
@@ -0,0 +1,221 @@
+/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause*/
+/*
+ * Copyright (C) 2021, STMicroelectronics - All Rights Reserved
+ * Author: STM32CubeMX code generation for STMicroelectronics.
+ */
+
+/* For more information on Device Tree configuration, please refer to
+ * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
+ */
+
+#include <dt-bindings/clock/stm32mp1-clksrc.h>
+#include "stm32mp15-ddr.dtsi"
+
+#include "stm32mp15-u-boot.dtsi"
+#include "stm32mp15-ddr.dtsi"
+
+/*
+ CubeMX's default had most things blocked by an ifndef CONFIG_STM32MP1_TRUSTED.
+ Going with the osd red board's approach of just always enabling to keep it simpler.
+*/
+
+/ {
+
+	aliases {
+		i2c3 = &i2c4; // Assuming this is for PMIC control?
+		mmc0 = &sdmmc1; // sd card as default
+	};
+	config {
+		u-boot,boot-led = "heartbeat";
+		u-boot,error-led = "error";
+	};
+	
+	led {
+		compatible = "gpio-leds";
+		led1 { 
+			label = "usr_led_1";
+			gpios = <&gpioa 5 GPIO_ACTIVE_LOW>;
+			default-state = "on";
+		}
+		led2 { 
+			label = "user_led_2";
+			gpios = <&gpioa 4 GPIO_ACTIVE_LOW>;
+			default-state = "on";
+			status = "okay";
+		}
+		led3 { 
+			label = "heartbeat";
+			gpios = <&gpioc 0 GPIO_ACTIVE_LOW>;
+			default-state = "on";
+			status = "okay";
+		}
+		led4 { 
+			label = "error";
+			gpios = <&gpiog 10 GPIO_ACTIVE_LOW>;
+			default-state = "off";
+			status = "okay";
+		}
+	};
+
+	clocks {
+		u-boot,dm-pre-reloc;
+
+		clk_lsi: clk-lsi {
+			u-boot,dm-pre-reloc;
+		};
+		
+		clk_hsi: clk-hsi {
+			u-boot,dm-pre-reloc;
+		};
+		
+		clk_csi: clk-csi {
+			u-boot,dm-pre-reloc;
+			status = "disabled";
+		};
+
+		clk_lse: clk-lse {
+			u-boot,dm-pre-reloc;
+			st,drive = < LSEDRV_MEDIUM_HIGH >;
+		};
+		
+		clk_hse: clk-hse {
+			u-boot,dm-pre-reloc;
+			st,digbypass;
+		};
+
+	};
+
+}; /*root*/
+
+
+&rcc {
+	u-boot,dm-pre-reloc;
+	st,clksrc = <
+		CLK_MPU_PLL1P
+		CLK_AXI_PLL2P
+		CLK_MCU_PLL3P
+		CLK_PLL12_HSE
+		CLK_PLL3_HSE
+		CLK_PLL4_HSE
+		CLK_RTC_LSE
+		CLK_MCO1_DISABLED
+		CLK_MCO2_DISABLED
+	>;
+	st,clkdiv = <
+		1 		/*MPU*/
+		0 		/*AXI*/
+		0 		/*MCU*/
+		1 		/*APB1*/
+		1 		/*APB2*/
+		1 		/*APB3*/
+		1 		/*APB4*/
+		2 		/*APB5*/
+		23 		/*RTC*/ /* was 0 by default */
+		0 		/*MCO1*/
+		0 		/*MCO2*/
+	>;
+	st,pkcs = <
+		CLK_CKPER_DISABLED
+		CLK_ETH_PLL4P /* is PLL3Q on red board */
+		CLK_SDMMC12_PLL4P
+		CLK_STGEN_HSE
+		CLK_USBPHY_HSE
+		CLK_SPI2S1_DISABLED
+		CLK_SPI2S23_DISABLED
+		CLK_SPI45_PCLK2
+		CLK_SPI6_DISABLED
+		CLK_I2C46_HSI
+		CLK_SDMMC3_DISABLED
+		CLK_USBO_USBPHY
+		CLK_ADC_DISABLED
+		CLK_CEC_DISABLED
+		CLK_I2C12_PCLK1
+		CLK_I2C35_DISABLED
+		CLK_UART1_PCLK5
+		CLK_UART24_HSI
+		CLK_UART35_DISABLED
+		CLK_UART6_DISABLED
+		CLK_UART78_DISABLED
+		CLK_SPDIF_DISABLED
+		CLK_FDCAN_HSE
+		CLK_SAI1_DISABLED
+		CLK_SAI2_DISABLED
+		CLK_SAI3_DISABLED
+		CLK_SAI4_DISABLED
+		CLK_RNG1_CSI
+		CLK_LPTIM1_DISABLED
+		CLK_LPTIM23_DISABLED
+		CLK_LPTIM45_DISABLED
+	>;
+	pll1:st,pll@0 {
+		compatible = "st,stm32mp1-pll";
+		reg = <0>;
+		cfg = < 2 80 0 1 1 PQR(1,0,0) >;
+		frac = < 0x800 >;
+		u-boot,dm-pre-reloc;
+	};
+	pll2:st,pll@1 {
+		compatible = "st,stm32mp1-pll";
+		reg = <1>;
+		cfg = < 2 65 1 0 0 PQR(1,1,1) >;
+		frac = < 0x1400 >;
+		u-boot,dm-pre-reloc;
+	};
+	pll3:st,pll@2 {
+		compatible = "st,stm32mp1-pll";
+		reg = <2>;
+		cfg = < 1 33 1 16 36 PQR(1,0,0) >;
+		frac = < 0x1a04 >;
+		u-boot,dm-pre-reloc;
+	};
+	pll4:st,pll@3 {
+		compatible = "st,stm32mp1-pll";
+		reg = <3>;
+		cfg = < 3 98 5 7 7 PQR(1,0,0) >;
+		u-boot,dm-pre-reloc;
+	};
+};
+
+&i2c4{
+	u-boot,dm-pre-reloc;
+};
+
+&sdmmc1{
+	u-boot,dm-pre-reloc;
+};
+
+
+&cryp1{
+	u-boot,dm-pre-reloc;
+};
+
+&hash1{
+	u-boot,dm-pre-reloc;
+};
+
+&uart4{
+	u-boot,dm-pre-reloc;
+};
+
+&pmic {
+	u-boot,dm-pre-reloc;
+};
+
+/* Critical custom boot configurations */
+&v3v3 {
+	regulator-always-on;
+};
+
+/* TODO@avinash - keep this section in mind for debugging console issues */
+&uart4_pins_mx {
+	u-boot,dm-pre-reloc;
+	pins1 {
+		u-boot,dm-pre-reloc;
+		/* pull-up on rx to avoid floating level */
+		bias-pull-up;
+	};
+	pins2 {
+		u-boot,dm-pre-reloc;
+	};
+};
+
diff --git a/dts/osd32mp1-nscn.dts b/dts/osd32mp1-nscn.dts
new file mode 100644
index 0000000000..a8f1f9c385
--- /dev/null
+++ b/dts/osd32mp1-nscn.dts
@@ -0,0 +1,874 @@
+/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
+/*
+ * Copyright (C) STMicroelectronics 2021 - All Rights Reserved
+ * Author: STM32CubeMX code generation for STMicroelectronics.
+ */
+
+/* For more information on Device Tree configuration, please refer to
+ * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
+ */
+
+/dts-v1/;
+#include <dt-bindings/pinctrl/stm32-pinfunc.h>
+
+#include "stm32mp157.dtsi"
+#include "stm32mp15xc.dtsi"
+#include "stm32mp15xxac-pinctrl.dtsi"
+#include "stm32mp157-m4-srm.dtsi"
+
+#include <dt-bindings/input/input.h>
+#include <dt-bindings/mfd/st,stpmic1.h>
+#include <dt-bindings/rtc/rtc-stm32.h>
+
+/ {
+	model = "TRI Nervous System Compute Node board";
+	compatible = "tri,osd32mp1-nscn", "st,stm32mp157";
+
+	memory@c0000000 {
+		device_type = "memory";
+		reg = <0xc0000000 0x20000000>;
+	};
+
+	reserved-memory {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges;
+
+    mcuram2: mcuram2@10000000 {
+      compatible = "shared-dma-pool";
+      reg = <0x10000000 0x40000>;
+      no-map;
+    };
+
+    vdev0vring0: vdev0vring0@10040000 {
+      compatible = "shared-dma-pool";
+      reg = <0x10040000 0x1000>;
+      no-map;
+    };
+
+    vdev0vring1: vdev0vring1@10041000 {
+      compatible = "shared-dma-pool";
+      reg = <0x10041000 0x1000>;
+      no-map;
+    };
+
+    vdev0buffer: vdev0buffer@10042000 {
+      compatible = "shared-dma-pool";
+      reg = <0x10042000 0x4000>;
+      no-map;
+    };
+
+    mcuram: mcuram@30000000 {
+      compatible = "shared-dma-pool";
+      reg = <0x30000000 0x40000>;
+      no-map;
+    };
+
+    retram: retram@38000000 {
+      compatible = "shared-dma-pool";
+      reg = <0x38000000 0x10000>;
+      no-map;
+    };
+	};
+
+  aliases {
+    ethernet0 = &ethernet0;
+    serial0 = &uart4;
+    serial1 = &usart3;
+    serial2 = &uart7;
+    serial3 = &usart2;
+  };
+
+  chosen {
+    stdout-path = "serial0:115200n8";
+  };
+
+	// This was in the reference project - TODO@(avinash) figure out if this is related to my console uart woes...
+	/*
+	sram: sram@10050000 {
+		compatible = "mmio-sram";
+		reg = <0x10050000 0x10000>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges = <0 0x10050000 0x10000>;
+
+		dma_pool: dma_pool@0 {
+			reg = <0x0 0x10000>;
+			pool;
+		};
+	};
+	*/
+	
+	//TODO@avinash - unverified - see if this works at all.
+	led {
+		compatible = "gpio-leds";
+		led3 {
+			label = "heartbeat";
+			gpios = <&gpioc 0 GPIO_ACTIVE_LOW>;
+			linux,default-trigger = "heartbeat";
+			default-state = "off";
+		};
+	};
+
+  vin: vin {
+    compatible = "regulator-fixed";
+    regulator-name = "vin";
+    regulator-min-microvolt = <5000000>;
+    regulator-max-microvolt = <5000000>;
+    regulator-always-on;
+  };
+	// Copied from reference design, might need updating.
+	usb_phy_tuning: usb-phy-tuning {
+		st,hs-dc-level = <2>;
+		st,fs-rftime-tuning;
+		st,hs-rftime-reduction;
+		st,hs-current-trim = <15>;
+		st,hs-impedance-trim = <1>;
+		st,squelch-level = <3>;
+		st,hs-rx-offset = <2>;
+		st,no-lsfs-sc;
+	};
+
+	clocks {
+		clk_lsi: clk-lsi {
+			clock-frequency = <32000>;
+		};
+		clk_hsi: clk-hsi {
+			clock-frequency = <64000000>;
+		};
+		clk_csi: clk-csi {
+			clock-frequency = <4000000>;
+		};
+		clk_lse: clk-lse {
+			clock-frequency = <32768>;
+		};
+		clk_hse: clk-hse {
+			clock-frequency = <24000000>;
+		};
+	};
+
+}; /*root*/
+
+&pinctrl {
+	u-boot,dm-pre-reloc;
+
+	dcmi_pins_mx: dcmi_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 6, AF13)>, /* DCMI_PIXCLK */
+					 <STM32_PINMUX('B', 7, AF13)>, /* DCMI_VSYNC */
+					 <STM32_PINMUX('B', 9, AF13)>, /* DCMI_D7 */
+					 <STM32_PINMUX('C', 7, AF13)>, /* DCMI_D1 */
+					 <STM32_PINMUX('D', 3, AF13)>, /* DCMI_D5 */
+					 <STM32_PINMUX('E', 5, AF13)>, /* DCMI_D6 */
+					 <STM32_PINMUX('E', 11, AF13)>, /* DCMI_D4 */
+					 <STM32_PINMUX('G', 6, AF13)>, /* DCMI_D12 */
+					 <STM32_PINMUX('G', 15, AF13)>, /* DCMI_D13 */
+					 <STM32_PINMUX('H', 8, AF13)>, /* DCMI_HSYNC */
+					 <STM32_PINMUX('H', 9, AF13)>, /* DCMI_D0 */
+					 <STM32_PINMUX('H', 11, AF13)>, /* DCMI_D2 */
+					 <STM32_PINMUX('H', 12, AF13)>, /* DCMI_D3 */
+					 <STM32_PINMUX('H', 15, AF13)>, /* DCMI_D11 */
+					 <STM32_PINMUX('I', 1, AF13)>, /* DCMI_D8 */
+					 <STM32_PINMUX('I', 2, AF13)>, /* DCMI_D9 */
+					 <STM32_PINMUX('I', 3, AF13)>; /* DCMI_D10 */
+			bias-disable;
+		};
+	};
+
+	dcmi_sleep_pins_mx: dcmi_sleep_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 6, ANALOG)>, /* DCMI_PIXCLK */
+					 <STM32_PINMUX('B', 7, ANALOG)>, /* DCMI_VSYNC */
+					 <STM32_PINMUX('B', 9, ANALOG)>, /* DCMI_D7 */
+					 <STM32_PINMUX('C', 7, ANALOG)>, /* DCMI_D1 */
+					 <STM32_PINMUX('D', 3, ANALOG)>, /* DCMI_D5 */
+					 <STM32_PINMUX('E', 5, ANALOG)>, /* DCMI_D6 */
+					 <STM32_PINMUX('E', 11, ANALOG)>, /* DCMI_D4 */
+					 <STM32_PINMUX('G', 6, ANALOG)>, /* DCMI_D12 */
+					 <STM32_PINMUX('G', 15, ANALOG)>, /* DCMI_D13 */
+					 <STM32_PINMUX('H', 8, ANALOG)>, /* DCMI_HSYNC */
+					 <STM32_PINMUX('H', 9, ANALOG)>, /* DCMI_D0 */
+					 <STM32_PINMUX('H', 11, ANALOG)>, /* DCMI_D2 */
+					 <STM32_PINMUX('H', 12, ANALOG)>, /* DCMI_D3 */
+					 <STM32_PINMUX('H', 15, ANALOG)>, /* DCMI_D11 */
+					 <STM32_PINMUX('I', 1, ANALOG)>, /* DCMI_D8 */
+					 <STM32_PINMUX('I', 2, ANALOG)>, /* DCMI_D9 */
+					 <STM32_PINMUX('I', 3, ANALOG)>; /* DCMI_D10 */
+		};
+	};
+
+	eth1_pins_mx: eth1_mx-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('A', 1, AF11)>, /* ETH1_RX_CLK */
+					 <STM32_PINMUX('A', 7, AF11)>, /* ETH1_RX_CTL */
+					 <STM32_PINMUX('B', 0, AF11)>, /* ETH1_RXD2 */
+					 <STM32_PINMUX('B', 1, AF11)>, /* ETH1_RXD3 */
+					 <STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 */
+					 <STM32_PINMUX('C', 5, AF11)>, /* ETH1_RXD1 */
+					 <STM32_PINMUX('G', 12, AF11)>; /* ETH1_PHY_INTN */
+			bias-disable;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('A', 2, AF11)>; /* ETH1_MDIO */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+		pins3 {
+			pinmux = <STM32_PINMUX('B', 11, AF11)>, /* ETH1_TX_CTL */
+					 <STM32_PINMUX('C', 1, AF11)>, /* ETH1_MDC */
+					 <STM32_PINMUX('C', 2, AF11)>, /* ETH1_TXD2 */
+					 <STM32_PINMUX('E', 2, AF11)>, /* ETH1_TXD3 */
+					 <STM32_PINMUX('G', 4, AF11)>, /* ETH1_GTX_CLK */
+					 <STM32_PINMUX('G', 5, AF11)>, /* ETH1_CLK125 */
+					 <STM32_PINMUX('G', 13, AF11)>, /* ETH1_TXD0 */
+					 <STM32_PINMUX('G', 14, AF11)>; /* ETH1_TXD1 */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <2>;
+		};
+		pins4 {
+			pinmux = <STM32_PINMUX('B', 5, AF0)>; /* ETH1_CLK */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <1>;
+		};
+	};
+
+	eth1_sleep_pins_mx: eth1_sleep_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_RX_CLK */
+					 <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
+					 <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_RX_CTL */
+					 <STM32_PINMUX('B', 0, ANALOG)>, /* ETH1_RXD2 */
+					 <STM32_PINMUX('B', 1, ANALOG)>, /* ETH1_RXD3 */
+					 <STM32_PINMUX('B', 5, ANALOG)>, /* ETH1_CLK */
+					 <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_CTL */
+					 <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_MDC */
+					 <STM32_PINMUX('C', 2, ANALOG)>, /* ETH1_TXD2 */
+					 <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
+					 <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
+					 <STM32_PINMUX('E', 2, ANALOG)>, /* ETH1_TXD3 */
+					 <STM32_PINMUX('G', 4, ANALOG)>, /* ETH1_GTX_CLK */
+					 <STM32_PINMUX('G', 5, ANALOG)>, /* ETH1_CLK125 */
+					 <STM32_PINMUX('G', 12, ANALOG)>, /* ETH1_PHY_INTN */
+					 <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
+					 <STM32_PINMUX('G', 14, ANALOG)>; /* ETH1_TXD1 */
+		};
+	};
+
+	i2c2_pins_mx: i2c2_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('F', 0, AF4)>, /* I2C2_SDA */
+					 <STM32_PINMUX('F', 1, AF4)>; /* I2C2_SCL */
+			bias-disable;
+			drive-open-drain;
+			slew-rate = <0>;
+		};
+	};
+
+	i2c2_sleep_pins_mx: i2c2_sleep_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('F', 0, ANALOG)>, /* I2C2_SDA */
+					 <STM32_PINMUX('F', 1, ANALOG)>; /* I2C2_SCL */
+		};
+	};
+
+	m4_fdcan1_pins_mx: m4_fdcan1_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('D', 0, RSVD)>, /* FDCAN1_RX */
+					 <STM32_PINMUX('D', 1, RSVD)>; /* FDCAN1_TX */
+		};
+	};
+
+	m4_i2c1_pins_mx: m4_i2c1_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('D', 12, RSVD)>, /* I2C1_SCL */
+					 <STM32_PINMUX('F', 15, RSVD)>; /* I2C1_SDA */
+		};
+	};
+
+	m4_spi4_pins_mx: m4_spi4_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('E', 12, RSVD)>, /* SPI4_SCK */
+					 <STM32_PINMUX('E', 13, RSVD)>, /* SPI4_MISO */
+					 <STM32_PINMUX('E', 14, RSVD)>; /* SPI4_MOSI */
+		};
+	};
+
+	m4_spi5_pins_mx: m4_spi5_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('F', 9, RSVD)>, /* SPI5_MOSI */
+					 <STM32_PINMUX('H', 6, RSVD)>, /* SPI5_SCK */
+					 <STM32_PINMUX('H', 7, RSVD)>; /* SPI5_MISO */
+		};
+	};
+
+	sdmmc1_pins_mx: sdmmc1_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins1 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
+					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
+					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
+					 <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
+					 <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <1>;
+		};
+		pins2 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <3>;
+		};
+	};
+
+	sdmmc1_opendrain_pins_mx: sdmmc1_opendrain_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins1 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
+					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
+					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
+					 <STM32_PINMUX('C', 11, AF12)>; /* SDMMC1_D3 */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <1>;
+		};
+		pins2 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <3>;
+		};
+		pins3 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
+			bias-disable;
+			drive-open-drain;
+			slew-rate = <1>;
+		};
+	};
+
+	sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
+					 <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
+					 <STM32_PINMUX('C', 10, ANALOG)>, /* SDMMC1_D2 */
+					 <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
+					 <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
+					 <STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
+		};
+	};
+
+	uart4_pins_mx: uart4_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins1 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('B', 2, AF8)>; /* UART4_RX */
+			bias-disable;
+		};
+		pins2 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+	};
+
+	uart4_sleep_pins_mx: uart4_sleep_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('B', 2, ANALOG)>, /* UART4_RX */
+					 <STM32_PINMUX('G', 11, ANALOG)>; /* UART4_TX */
+		};
+	};
+
+	usb_otg_hs_pins_mx: usb_otg_hs_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 10, ANALOG)>; /* USB_OTG_HS_ID */
+		};
+	};
+
+	usb_otg_hs_sleep_pins_mx: usb_otg_hs_sleep_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 10, ANALOG)>; /* USB_OTG_HS_ID */
+		};
+	};
+
+};
+
+&pinctrl_z {
+	u-boot,dm-pre-reloc;
+
+	i2c4_pins_z_mx: i2c4_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('Z', 4, AF6)>, /* I2C4_SCL */
+					 <STM32_PINMUX('Z', 5, AF6)>; /* I2C4_SDA */
+			bias-disable;
+			drive-open-drain;
+			slew-rate = <0>;
+		};
+	};
+
+	i2c4_sleep_pins_z_mx: i2c4_sleep_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('Z', 4, ANALOG)>, /* I2C4_SCL */
+					 <STM32_PINMUX('Z', 5, ANALOG)>; /* I2C4_SDA */
+		};
+	};
+
+	usart1_pins_z_mx: usart1_mx-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('Z', 1, AF7)>; /* USART1_RX */
+			bias-disable;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('Z', 7, AF7)>; /* USART1_TX */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+	};
+
+	usart1_sleep_pins_z_mx: usart1_sleep_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('Z', 1, ANALOG)>, /* USART1_RX */
+					 <STM32_PINMUX('Z', 7, ANALOG)>; /* USART1_TX */
+		};
+	};
+
+};
+
+&m4_rproc{
+	/*Restriction: "memory-region" property is not managed - please to use User-Section if needed*/
+	mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>;
+	mbox-names = "vq0", "vq1", "shutdown";
+	status = "okay";
+
+  memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
+      <&vdev0vring1>, <&vdev0buffer>;
+  interrupt-parent = <&exti>;
+  interrupts = <68 1>;
+  wakeup-source;
+
+	m4_system_resources{
+		status = "okay";
+	};
+};
+
+&bsec{
+	status = "okay";
+};
+
+&crc1{
+	status = "okay";
+};
+
+&cryp1{
+	u-boot,dm-pre-reloc;
+	status = "okay";
+};
+
+&dcmi{
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&dcmi_pins_mx>;
+	pinctrl-1 = <&dcmi_sleep_pins_mx>;
+	status = "okay";
+};
+
+&dma1{
+	status = "okay";
+  sram = <&dma_pool>;
+};
+
+&dma2{
+	status = "disabled";
+  sram = <&dma_pool>;
+};
+
+&dmamux1{
+
+	dma-masters = <&dma1>;
+	dma-channels = <8>;
+
+	status = "okay";
+};
+
+&dts{
+	status = "okay";
+};
+
+&ethernet0{
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&eth1_pins_mx>;
+	pinctrl-1 = <&eth1_sleep_pins_mx>;
+	status = "okay";
+	// TODO@avinash - update this as neeeded, ifdefs for different phy boards.
+	st,eth_clk_sel = <1>; 
+  phy-mode = "rgmii-id";
+	max-speed = <1000>;
+	phy-handle = <&phy0>;
+
+	mdio0 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "snps,dwmac-mdio";
+		phy0: ethernet-phy@0 {
+			reg = <0>;
+		};
+	};
+
+};
+
+&gpu{
+	status = "okay";
+	// TODO@avinash - figure out if this is even worth supporting for now.
+	contiguous-area = <&gpu_reserved>;
+};
+
+&hash1{
+	u-boot,dm-pre-reloc;
+	status = "okay";
+};
+
+&hsem{
+	status = "okay";
+};
+
+&i2c2{
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&i2c2_pins_mx>;
+	pinctrl-1 = <&i2c2_sleep_pins_mx>;
+	status = "okay";
+};
+
+&i2c4{
+	u-boot,dm-pre-reloc;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&i2c4_pins_z_mx>;
+	pinctrl-1 = <&i2c4_sleep_pins_z_mx>;
+	status = "okay";
+
+	// Unique properties required for interfacing with the ST PMIC chip.
+  i2c-scl-rising-time-ns = <185>;
+  i2c-scl-falling-time-ns = <20>;
+  clock-frequency = <400000>;
+  /delete-property/dmas;
+  /delete-property/dma-names;
+  pmic: stpmic@33 {
+    compatible = "st,stpmic1";
+    reg = <0x33>;
+    interrupts-extended = <&exti_pwr 55 IRQ_TYPE_EDGE_FALLING>;
+    interrupt-controller;
+    #interrupt-cells = <2>;
+    status = "okay";
+
+    regulators {
+      compatible = "st,stpmic1-regulators";
+      buck1-supply = <&vin>;
+      buck2-supply = <&vin>;
+      buck3-supply = <&vin>;
+      buck4-supply = <&vin>;
+      ldo1-supply = <&v3v3>;
+      ldo2-supply = <&vin>;
+      ldo3-supply = <&vdd_ddr>;
+      ldo4-supply = <&vin>;
+      ldo5-supply = <&vin>;
+      ldo6-supply = <&v3v3>;
+      vref_ddr-supply = <&vin>;
+      boost-supply = <&vin>;
+      pwr_sw1-supply = <&bst_out>;
+      pwr_sw2-supply = <&bst_out>;
+
+      vddcore: buck1 {
+        regulator-name = "vddcore";
+        regulator-min-microvolt = <1200000>;
+        regulator-max-microvolt = <1350000>;
+        regulator-always-on;
+        regulator-initial-mode = <0>;
+        regulator-over-current-protection;
+      };
+
+      vdd_ddr: buck2 {
+        regulator-name = "vdd_ddr";
+        regulator-min-microvolt = <1350000>;
+        regulator-max-microvolt = <1350000>;
+        regulator-always-on;
+        regulator-initial-mode = <0>;
+        regulator-over-current-protection;
+      };
+
+      vdd: buck3 {
+        regulator-name = "vdd";
+        regulator-min-microvolt = <3300000>;
+        regulator-max-microvolt = <3300000>;
+        regulator-always-on;
+        st,mask-reset;
+        regulator-initial-mode = <0>;
+        regulator-over-current-protection;
+      };
+
+      v3v3: buck4 {
+        regulator-name = "v3v3";
+        regulator-min-microvolt = <3300000>;
+        regulator-max-microvolt = <3300000>;
+        regulator-always-on;
+        regulator-over-current-protection;
+        regulator-initial-mode = <0>;
+      };
+
+      // TODO@avinash - figure out the right default V for cameras.
+			vdd_camera: ldo1 {
+        regulator-name = "vdd_camera";
+        regulator-min-microvolt = <1500000>;
+        regulator-max-microvolt = <1500000>;
+        regulator-always-on;
+        interrupts = <IT_CURLIM_LDO1 0>;
+      };
+
+			// TODO@avinash - figure out if I can turn this off for power savings.
+      v3v3_hdmi: ldo2 {
+        regulator-name = "v3v3_hdmi";
+        regulator-min-microvolt = <3300000>;
+        regulator-max-microvolt = <3300000>;
+        regulator-always-on;
+        interrupts = <IT_CURLIM_LDO2 0>;
+      };
+
+      vtt_ddr: ldo3 {
+        regulator-name = "vtt_ddr";
+        regulator-min-microvolt = <500000>;
+        regulator-max-microvolt = <750000>;
+        regulator-always-on;
+        regulator-over-current-protection;
+      };
+
+      vdd_usb: ldo4 {
+        regulator-name = "vdd_usb";
+        regulator-min-microvolt = <3300000>;
+        regulator-max-microvolt = <3300000>;
+        interrupts = <IT_CURLIM_LDO4 0>;
+        regulator-always-on;
+      };
+			
+			// TODO@avinash - unused on current board, should see if turning it off breaks things.
+      vdda: ldo5 {
+        regulator-name = "vdda";
+        regulator-min-microvolt = <2900000>;
+        regulator-max-microvolt = <2900000>;
+        interrupts = <IT_CURLIM_LDO5 0>;
+        regulator-boot-on;
+      };
+
+			// TODO@avinash - unused on current board, should see if turning it off breaks things.
+			// Also see if I can rename without breaking the config file.
+      v1v2_hdmi: ldo6 {
+        regulator-name = "v1v2_hdmi";
+        regulator-min-microvolt = <1200000>;
+        regulator-max-microvolt = <1200000>;
+        regulator-always-on;
+        interrupts = <IT_CURLIM_LDO6 0>;
+      };
+
+      vref_ddr: vref_ddr {
+        regulator-name = "vref_ddr";
+        regulator-always-on;
+        regulator-over-current-protection;
+      };
+
+			// bst_out, vbus_otg, vbus_sw are all for otg usb things, off for now but might explore turning them on if there are other USB issues.
+      bst_out: boost {
+        regulator-name = "bst_out";
+        interrupts = <IT_OCP_BOOST 0>;
+       };
+
+      vbus_otg: pwr_sw1 {
+        regulator-name = "vbus_otg";
+        interrupts = <IT_OCP_OTG 0>;
+       };
+
+       vbus_sw: pwr_sw2 {
+        regulator-name = "vbus_sw";
+        interrupts = <IT_OCP_SWOUT 0>;
+        regulator-active-discharge = <1>;
+       };
+    };
+
+    onkey {
+      compatible = "st,stpmic1-onkey";
+      interrupts = <IT_PONKEY_F 0>, <IT_PONKEY_R 0>;
+      interrupt-names = "onkey-falling", "onkey-rising";
+      power-off-time-sec = <1>; // Not in reference design.
+      status = "okay";
+    };
+
+    watchdog {
+      compatible = "st,stpmic1-wdt";
+      status = "disabled";
+    };
+  };
+};
+
+&ipcc{
+	status = "okay";
+};
+
+&iwdg2{
+	status = "okay";
+  timeout-sec = <32>;
+};
+
+&m4_dma2{
+	status = "okay";
+};
+
+&m4_i2c1{
+	pinctrl-names = "default";
+	pinctrl-0 = <&m4_i2c1_pins_mx>;
+	status = "okay";
+};
+
+&m4_m_can1{
+	pinctrl-names = "default";
+	pinctrl-0 = <&m4_fdcan1_pins_mx>;
+	status = "okay";
+};
+
+&m4_spi4{
+	pinctrl-names = "default";
+	pinctrl-0 = <&m4_spi4_pins_mx>;
+	status = "okay";
+};
+
+&m4_spi5{
+	pinctrl-names = "default";
+	pinctrl-0 = <&m4_spi5_pins_mx>;
+	status = "okay";
+};
+
+&mdma1{
+	status = "okay";
+};
+
+// Not in reference design, might be important!
+&pwr_regulators{
+	status = "okay";
+  vdd-supply = <&vdd>;
+  vdd_3v3_usbfs-supply = <&vdd_usb>;
+};
+
+&rcc{
+	u-boot,dm-pre-reloc;
+	status = "okay";
+};
+
+&rng1{
+	status = "okay";
+};
+
+&rtc{
+	status = "okay";
+};
+
+&sdmmc1{
+	u-boot,dm-pre-reloc;
+	pinctrl-names = "default", "opendrain", "sleep";
+	pinctrl-0 = <&sdmmc1_pins_mx>;
+	pinctrl-1 = <&sdmmc1_opendrain_pins_mx>;
+	pinctrl-2 = <&sdmmc1_sleep_pins_mx>;
+	status = "okay";
+
+  cd-gpios = <&gpiob 7 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
+	// broken-cd; // Reference design has chip detect assumed as broken - could be worth trying to fix thigns (TODO@avinash)
+
+  disable-wp; // Not in reference design.
+  st,neg-edge;
+  bus-width = <4>;
+  vmmc-supply = <&v3v3>;
+
+};
+
+&tamp{
+	status = "okay";
+};
+
+// Main debugging console, mess this section at extreme peril.
+&uart4{
+	u-boot,dm-pre-reloc;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&uart4_pins_mx>;
+	pinctrl-1 = <&uart4_sleep_pins_mx>;
+	status = "okay";
+
+  /delete-property/dmas; // Not in reference design.
+  /delete-property/dma-names; // Not in reference design.
+};
+
+&usart1{
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&usart1_pins_z_mx>;
+	pinctrl-1 = <&usart1_sleep_pins_z_mx>;
+	status = "okay";
+};
+
+
+&usbh_ehci{
+	status = "okay";
+};
+
+&usbh_ohci{
+	status = "okay";
+};
+
+&usbotg_hs{
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&usb_otg_hs_pins_mx>;
+	pinctrl-1 = <&usb_otg_hs_sleep_pins_mx>;
+	status = "okay";
+	// TODO@avinash - probably needs more configuration here.
+};
+
+&usbphyc{
+	status = "okay";
+	
+	vdd3v3-supply = <&vdd_usb>; // In reference design, added here.
+};
+
+&usbphyc_port0{
+	status = "okay";
+	st,phy-tuning = <&usb_phy_tuning>;
+};
+
+&usbphyc_port1{
+	status = "okay";
+	st,phy-tuning = <&usb_phy_tuning>;
+};
+
+&cpu0{
+	cpu-supply = <&vddcore>;
+};
+
+&cpu1{
+	cpu-supply = <&vddcore>;
+};
+
+&sram {
+	dma_pool: dma_pool@0 {
+		reg = <0x50000 0x10000>;
+		pool;
+	};
+};
+
