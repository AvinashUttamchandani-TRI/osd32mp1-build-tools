diff --git a/arch/arm/boot/dts/osd32mp1-nscn.dts b/arch/arm/boot/dts/osd32mp1-nscn.dts
new file mode 100644
index 000000000000..0837c42430ff
--- /dev/null
+++ b/arch/arm/boot/dts/osd32mp1-nscn.dts
@@ -0,0 +1,931 @@
+/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
+/*
+ * Copyright (C) STMicroelectronics 2021 - All Rights Reserved
+ * Author: STM32CubeMX code generation for STMicroelectronics.
+ */
+
+/* For more information on Device Tree configuration, please refer to
+ * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
+ */
+
+/dts-v1/;
+#include <dt-bindings/pinctrl/stm32-pinfunc.h>
+
+#include "stm32mp157.dtsi"
+#include "stm32mp15xc.dtsi"
+#include "stm32mp15xxac-pinctrl.dtsi"
+#include "stm32mp157-m4-srm.dtsi"
+
+/* USER CODE BEGIN includes */
+#include <dt-bindings/mfd/st,stpmic1.h>
+#include <dt-bindings/rtc/rtc-stm32.h>
+/* USER CODE END includes */
+
+/ {
+	model = "STMicroelectronics custom STM32CubeMX board";
+	compatible = "st,stm32mp157c-osd32mp157c-512m-baa_minimalconfig-mx", "st,stm32mp157";
+
+	memory@c0000000 {
+		device_type = "memory";
+		reg = <0xc0000000 0x20000000>;
+
+		/* USER CODE BEGIN memory */
+		/* USER CODE END memory */
+	};
+
+	reserved-memory {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges;
+
+		/* USER CODE BEGIN reserved-memory */
+    mcuram2: mcuram2@10000000 {
+      compatible = "shared-dma-pool";
+      reg = <0x10000000 0x40000>;
+      no-map;
+    };
+
+    vdev0vring0: vdev0vring0@10040000 {
+      compatible = "shared-dma-pool";
+      reg = <0x10040000 0x1000>;
+      no-map;
+    };
+
+    vdev0vring1: vdev0vring1@10041000 {
+      compatible = "shared-dma-pool";
+      reg = <0x10041000 0x1000>;
+      no-map;
+    };
+
+    vdev0buffer: vdev0buffer@10042000 {
+      compatible = "shared-dma-pool";
+      reg = <0x10042000 0x4000>;
+      no-map;
+    };
+
+    mcuram: mcuram@30000000 {
+      compatible = "shared-dma-pool";
+      reg = <0x30000000 0x40000>;
+      no-map;
+    };
+
+    retram: retram@38000000 {
+      compatible = "shared-dma-pool";
+      reg = <0x38000000 0x10000>;
+      no-map;
+    };
+		/* USER CODE END reserved-memory */
+	};
+
+	/* USER CODE BEGIN root */
+  aliases {
+    ethernet0 = &ethernet0;
+    serial0 = &uart4;
+    serial1 = &usart3;
+    serial2 = &uart7;
+    serial3 = &usart2;
+  };
+
+  chosen {
+    stdout-path = "serial0:115200n8";
+  };
+
+  vin: vin {
+    compatible = "regulator-fixed";
+    regulator-name = "vin";
+    regulator-min-microvolt = <5000000>;
+    regulator-max-microvolt = <5000000>;
+    regulator-always-on;
+  };
+	/* USER CODE END root */
+
+	clocks {
+
+		/* USER CODE BEGIN clocks */
+		/* USER CODE END clocks */
+
+#ifndef CONFIG_STM32MP1_TRUSTED
+		clk_lsi: clk-lsi {
+			clock-frequency = <32000>;
+		};
+		clk_hsi: clk-hsi {
+			clock-frequency = <64000000>;
+		};
+		clk_csi: clk-csi {
+			clock-frequency = <4000000>;
+		};
+		clk_lse: clk-lse {
+			clock-frequency = <32768>;
+		};
+		clk_hse: clk-hse {
+			clock-frequency = <24000000>;
+		};
+#endif	/*CONFIG_STM32MP1_TRUSTED*/
+	};
+
+}; /*root*/
+
+&pinctrl {
+	u-boot,dm-pre-reloc;
+
+	dcmi_pins_mx: dcmi_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 6, AF13)>, /* DCMI_PIXCLK */
+					 <STM32_PINMUX('B', 7, AF13)>, /* DCMI_VSYNC */
+					 <STM32_PINMUX('B', 9, AF13)>, /* DCMI_D7 */
+					 <STM32_PINMUX('C', 7, AF13)>, /* DCMI_D1 */
+					 <STM32_PINMUX('D', 3, AF13)>, /* DCMI_D5 */
+					 <STM32_PINMUX('E', 5, AF13)>, /* DCMI_D6 */
+					 <STM32_PINMUX('E', 11, AF13)>, /* DCMI_D4 */
+					 <STM32_PINMUX('G', 6, AF13)>, /* DCMI_D12 */
+					 <STM32_PINMUX('G', 15, AF13)>, /* DCMI_D13 */
+					 <STM32_PINMUX('H', 8, AF13)>, /* DCMI_HSYNC */
+					 <STM32_PINMUX('H', 9, AF13)>, /* DCMI_D0 */
+					 <STM32_PINMUX('H', 11, AF13)>, /* DCMI_D2 */
+					 <STM32_PINMUX('H', 12, AF13)>, /* DCMI_D3 */
+					 <STM32_PINMUX('H', 15, AF13)>, /* DCMI_D11 */
+					 <STM32_PINMUX('I', 1, AF13)>, /* DCMI_D8 */
+					 <STM32_PINMUX('I', 2, AF13)>, /* DCMI_D9 */
+					 <STM32_PINMUX('I', 3, AF13)>; /* DCMI_D10 */
+			bias-disable;
+		};
+	};
+
+	dcmi_sleep_pins_mx: dcmi_sleep_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 6, ANALOG)>, /* DCMI_PIXCLK */
+					 <STM32_PINMUX('B', 7, ANALOG)>, /* DCMI_VSYNC */
+					 <STM32_PINMUX('B', 9, ANALOG)>, /* DCMI_D7 */
+					 <STM32_PINMUX('C', 7, ANALOG)>, /* DCMI_D1 */
+					 <STM32_PINMUX('D', 3, ANALOG)>, /* DCMI_D5 */
+					 <STM32_PINMUX('E', 5, ANALOG)>, /* DCMI_D6 */
+					 <STM32_PINMUX('E', 11, ANALOG)>, /* DCMI_D4 */
+					 <STM32_PINMUX('G', 6, ANALOG)>, /* DCMI_D12 */
+					 <STM32_PINMUX('G', 15, ANALOG)>, /* DCMI_D13 */
+					 <STM32_PINMUX('H', 8, ANALOG)>, /* DCMI_HSYNC */
+					 <STM32_PINMUX('H', 9, ANALOG)>, /* DCMI_D0 */
+					 <STM32_PINMUX('H', 11, ANALOG)>, /* DCMI_D2 */
+					 <STM32_PINMUX('H', 12, ANALOG)>, /* DCMI_D3 */
+					 <STM32_PINMUX('H', 15, ANALOG)>, /* DCMI_D11 */
+					 <STM32_PINMUX('I', 1, ANALOG)>, /* DCMI_D8 */
+					 <STM32_PINMUX('I', 2, ANALOG)>, /* DCMI_D9 */
+					 <STM32_PINMUX('I', 3, ANALOG)>; /* DCMI_D10 */
+		};
+	};
+
+	eth1_pins_mx: eth1_mx-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('A', 1, AF11)>, /* ETH1_RX_CLK */
+					 <STM32_PINMUX('A', 7, AF11)>, /* ETH1_RX_CTL */
+					 <STM32_PINMUX('B', 0, AF11)>, /* ETH1_RXD2 */
+					 <STM32_PINMUX('B', 1, AF11)>, /* ETH1_RXD3 */
+					 <STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 */
+					 <STM32_PINMUX('C', 5, AF11)>, /* ETH1_RXD1 */
+					 <STM32_PINMUX('G', 12, AF11)>; /* ETH1_PHY_INTN */
+			bias-disable;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('A', 2, AF11)>; /* ETH1_MDIO */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+		pins3 {
+			pinmux = <STM32_PINMUX('B', 11, AF11)>, /* ETH1_TX_CTL */
+					 <STM32_PINMUX('C', 1, AF11)>, /* ETH1_MDC */
+					 <STM32_PINMUX('C', 2, AF11)>, /* ETH1_TXD2 */
+					 <STM32_PINMUX('E', 2, AF11)>, /* ETH1_TXD3 */
+					 <STM32_PINMUX('G', 4, AF11)>, /* ETH1_GTX_CLK */
+					 <STM32_PINMUX('G', 5, AF11)>, /* ETH1_CLK125 */
+					 <STM32_PINMUX('G', 13, AF11)>, /* ETH1_TXD0 */
+					 <STM32_PINMUX('G', 14, AF11)>; /* ETH1_TXD1 */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <2>;
+		};
+		pins4 {
+			pinmux = <STM32_PINMUX('B', 5, AF0)>; /* ETH1_CLK */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <1>;
+		};
+	};
+
+	eth1_sleep_pins_mx: eth1_sleep_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_RX_CLK */
+					 <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
+					 <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_RX_CTL */
+					 <STM32_PINMUX('B', 0, ANALOG)>, /* ETH1_RXD2 */
+					 <STM32_PINMUX('B', 1, ANALOG)>, /* ETH1_RXD3 */
+					 <STM32_PINMUX('B', 5, ANALOG)>, /* ETH1_CLK */
+					 <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_CTL */
+					 <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_MDC */
+					 <STM32_PINMUX('C', 2, ANALOG)>, /* ETH1_TXD2 */
+					 <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
+					 <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
+					 <STM32_PINMUX('E', 2, ANALOG)>, /* ETH1_TXD3 */
+					 <STM32_PINMUX('G', 4, ANALOG)>, /* ETH1_GTX_CLK */
+					 <STM32_PINMUX('G', 5, ANALOG)>, /* ETH1_CLK125 */
+					 <STM32_PINMUX('G', 12, ANALOG)>, /* ETH1_PHY_INTN */
+					 <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
+					 <STM32_PINMUX('G', 14, ANALOG)>; /* ETH1_TXD1 */
+		};
+	};
+
+	i2c2_pins_mx: i2c2_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('F', 0, AF4)>, /* I2C2_SDA */
+					 <STM32_PINMUX('F', 1, AF4)>; /* I2C2_SCL */
+			bias-disable;
+			drive-open-drain;
+			slew-rate = <0>;
+		};
+	};
+
+	i2c2_sleep_pins_mx: i2c2_sleep_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('F', 0, ANALOG)>, /* I2C2_SDA */
+					 <STM32_PINMUX('F', 1, ANALOG)>; /* I2C2_SCL */
+		};
+	};
+
+	m4_fdcan1_pins_mx: m4_fdcan1_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('D', 0, RSVD)>, /* FDCAN1_RX */
+					 <STM32_PINMUX('D', 1, RSVD)>; /* FDCAN1_TX */
+		};
+	};
+
+	m4_i2c1_pins_mx: m4_i2c1_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('D', 12, RSVD)>, /* I2C1_SCL */
+					 <STM32_PINMUX('F', 15, RSVD)>; /* I2C1_SDA */
+		};
+	};
+
+	m4_spi4_pins_mx: m4_spi4_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('E', 12, RSVD)>, /* SPI4_SCK */
+					 <STM32_PINMUX('E', 13, RSVD)>, /* SPI4_MISO */
+					 <STM32_PINMUX('E', 14, RSVD)>; /* SPI4_MOSI */
+		};
+	};
+
+	m4_spi5_pins_mx: m4_spi5_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('F', 9, RSVD)>, /* SPI5_MOSI */
+					 <STM32_PINMUX('H', 6, RSVD)>, /* SPI5_SCK */
+					 <STM32_PINMUX('H', 7, RSVD)>; /* SPI5_MISO */
+		};
+	};
+
+	sdmmc1_pins_mx: sdmmc1_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins1 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
+					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
+					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
+					 <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
+					 <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <1>;
+		};
+		pins2 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <3>;
+		};
+	};
+
+	sdmmc1_opendrain_pins_mx: sdmmc1_opendrain_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins1 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
+					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
+					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
+					 <STM32_PINMUX('C', 11, AF12)>; /* SDMMC1_D3 */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <1>;
+		};
+		pins2 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <3>;
+		};
+		pins3 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
+			bias-disable;
+			drive-open-drain;
+			slew-rate = <1>;
+		};
+	};
+
+	sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
+					 <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
+					 <STM32_PINMUX('C', 10, ANALOG)>, /* SDMMC1_D2 */
+					 <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
+					 <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
+					 <STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
+		};
+	};
+
+	uart4_pins_mx: uart4_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins1 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('B', 2, AF8)>; /* UART4_RX */
+			bias-disable;
+		};
+		pins2 {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+	};
+
+	uart4_sleep_pins_mx: uart4_sleep_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('B', 2, ANALOG)>, /* UART4_RX */
+					 <STM32_PINMUX('G', 11, ANALOG)>; /* UART4_TX */
+		};
+	};
+
+	usb_otg_hs_pins_mx: usb_otg_hs_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 10, ANALOG)>; /* USB_OTG_HS_ID */
+		};
+	};
+
+	usb_otg_hs_sleep_pins_mx: usb_otg_hs_sleep_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 10, ANALOG)>; /* USB_OTG_HS_ID */
+		};
+	};
+
+	/* USER CODE BEGIN pinctrl */
+	/* USER CODE END pinctrl */
+};
+
+&pinctrl_z {
+	u-boot,dm-pre-reloc;
+
+	i2c4_pins_z_mx: i2c4_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('Z', 4, AF6)>, /* I2C4_SCL */
+					 <STM32_PINMUX('Z', 5, AF6)>; /* I2C4_SDA */
+			bias-disable;
+			drive-open-drain;
+			slew-rate = <0>;
+		};
+	};
+
+	i2c4_sleep_pins_z_mx: i2c4_sleep_mx-0 {
+		u-boot,dm-pre-reloc;
+		pins {
+			u-boot,dm-pre-reloc;
+			pinmux = <STM32_PINMUX('Z', 4, ANALOG)>, /* I2C4_SCL */
+					 <STM32_PINMUX('Z', 5, ANALOG)>; /* I2C4_SDA */
+		};
+	};
+
+	usart1_pins_z_mx: usart1_mx-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('Z', 1, AF7)>; /* USART1_RX */
+			bias-disable;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('Z', 7, AF7)>; /* USART1_TX */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+	};
+
+	usart1_sleep_pins_z_mx: usart1_sleep_mx-0 {
+		pins {
+			pinmux = <STM32_PINMUX('Z', 1, ANALOG)>, /* USART1_RX */
+					 <STM32_PINMUX('Z', 7, ANALOG)>; /* USART1_TX */
+		};
+	};
+
+	/* USER CODE BEGIN pinctrl_z */
+	/* USER CODE END pinctrl_z */
+};
+
+&m4_rproc{
+	/*Restriction: "memory-region" property is not managed - please to use User-Section if needed*/
+	mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>;
+	mbox-names = "vq0", "vq1", "shutdown";
+	status = "okay";
+
+	/* USER CODE BEGIN m4_rproc */
+  memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
+      <&vdev0vring1>, <&vdev0buffer>;
+  interrupt-parent = <&exti>;
+  interrupts = <68 1>;
+  wakeup-source;
+	/* USER CODE END m4_rproc */
+
+	m4_system_resources{
+		status = "okay";
+
+		/* USER CODE BEGIN m4_system_resources */
+		/* USER CODE END m4_system_resources */
+	};
+};
+
+&bsec{
+	status = "okay";
+
+	/* USER CODE BEGIN bsec */
+	/* USER CODE END bsec */
+};
+
+&crc1{
+	status = "okay";
+
+	/* USER CODE BEGIN crc1 */
+	/* USER CODE END crc1 */
+};
+
+&cryp1{
+	u-boot,dm-pre-reloc;
+	status = "okay";
+
+	/* USER CODE BEGIN cryp1 */
+	/* USER CODE END cryp1 */
+};
+
+&dcmi{
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&dcmi_pins_mx>;
+	pinctrl-1 = <&dcmi_sleep_pins_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN dcmi */
+	/* USER CODE END dcmi */
+};
+
+&dma1{
+	status = "okay";
+
+	/* USER CODE BEGIN dma1 */
+  sram = <&dma_pool>;
+	/* USER CODE END dma1 */
+};
+
+&dma2{
+	status = "disabled";
+
+	/* USER CODE BEGIN dma2 */
+  sram = <&dma_pool>;
+	/* USER CODE END dma2 */
+};
+
+&dmamux1{
+
+	dma-masters = <&dma1>;
+	dma-channels = <8>;
+
+	status = "okay";
+
+	/* USER CODE BEGIN dmamux1 */
+	/* USER CODE END dmamux1 */
+};
+
+&dts{
+	status = "okay";
+
+	/* USER CODE BEGIN dts */
+	/* USER CODE END dts */
+};
+
+&ethernet0{
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&eth1_pins_mx>;
+	pinctrl-1 = <&eth1_sleep_pins_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN ethernet0 */
+	/* USER CODE END ethernet0 */
+};
+
+&gpu{
+	status = "okay";
+
+	/* USER CODE BEGIN gpu */
+	/* USER CODE END gpu */
+};
+
+&hash1{
+	u-boot,dm-pre-reloc;
+	status = "okay";
+
+	/* USER CODE BEGIN hash1 */
+	/* USER CODE END hash1 */
+};
+
+&hsem{
+	status = "okay";
+
+	/* USER CODE BEGIN hsem */
+	/* USER CODE END hsem */
+};
+
+&i2c2{
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&i2c2_pins_mx>;
+	pinctrl-1 = <&i2c2_sleep_pins_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN i2c2 */
+	/* USER CODE END i2c2 */
+};
+
+&i2c4{
+	u-boot,dm-pre-reloc;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&i2c4_pins_z_mx>;
+	pinctrl-1 = <&i2c4_sleep_pins_z_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN i2c4 */
+  i2c-scl-rising-time-ns = <185>;
+  i2c-scl-falling-time-ns = <20>;
+  clock-frequency = <400000>;
+  /delete-property/dmas;
+  /delete-property/dma-names;
+  pmic: stpmic@33 {
+    compatible = "st,stpmic1";
+    reg = <0x33>;
+    interrupts-extended = <&exti_pwr 55 IRQ_TYPE_EDGE_FALLING>;
+    interrupt-controller;
+    #interrupt-cells = <2>;
+    status = "okay";
+
+    regulators {
+      compatible = "st,stpmic1-regulators";
+      buck1-supply = <&vin>;
+      buck2-supply = <&vin>;
+      buck3-supply = <&vin>;
+      buck4-supply = <&vin>;
+      ldo1-supply = <&v3v3>;
+      ldo2-supply = <&vin>;
+      ldo3-supply = <&vdd_ddr>;
+      ldo4-supply = <&vin>;
+      ldo5-supply = <&vin>;
+      ldo6-supply = <&v3v3>;
+      vref_ddr-supply = <&vin>;
+      boost-supply = <&vin>;
+      pwr_sw1-supply = <&bst_out>;
+      pwr_sw2-supply = <&bst_out>;
+
+      vddcore: buck1 {
+        regulator-name = "vddcore";
+        regulator-min-microvolt = <1200000>;
+        regulator-max-microvolt = <1350000>;
+        regulator-always-on;
+        regulator-initial-mode = <0>;
+        regulator-over-current-protection;
+      };
+
+      vdd_ddr: buck2 {
+        regulator-name = "vdd_ddr";
+        regulator-min-microvolt = <1350000>;
+        regulator-max-microvolt = <1350000>;
+        regulator-always-on;
+        regulator-initial-mode = <0>;
+        regulator-over-current-protection;
+      };
+
+      vdd: buck3 {
+        regulator-name = "vdd";
+        regulator-min-microvolt = <3300000>;
+        regulator-max-microvolt = <3300000>;
+        regulator-always-on;
+        st,mask-reset;
+        regulator-initial-mode = <0>;
+        regulator-over-current-protection;
+      };
+
+      v3v3: buck4 {
+        regulator-name = "v3v3";
+        regulator-min-microvolt = <3300000>;
+        regulator-max-microvolt = <3300000>;
+        regulator-always-on;
+        regulator-over-current-protection;
+        regulator-initial-mode = <0>;
+      };
+
+      v1v8_audio: ldo1 {
+        regulator-name = "v1v8_audio";
+        regulator-min-microvolt = <1800000>;
+        regulator-max-microvolt = <1800000>;
+        regulator-always-on;
+        interrupts = <IT_CURLIM_LDO1 0>;
+      };
+
+      v3v3_hdmi: ldo2 {
+        regulator-name = "v3v3_hdmi";
+        regulator-min-microvolt = <3300000>;
+        regulator-max-microvolt = <3300000>;
+        regulator-always-on;
+        interrupts = <IT_CURLIM_LDO2 0>;
+      };
+
+      vtt_ddr: ldo3 {
+        regulator-name = "vtt_ddr";
+        regulator-min-microvolt = <500000>;
+        regulator-max-microvolt = <750000>;
+        regulator-always-on;
+        regulator-over-current-protection;
+      };
+
+      vdd_usb: ldo4 {
+        regulator-name = "vdd_usb";
+        regulator-min-microvolt = <3300000>;
+        regulator-max-microvolt = <3300000>;
+        interrupts = <IT_CURLIM_LDO4 0>;
+        regulator-always-on;
+      };
+
+      vdda: ldo5 {
+        regulator-name = "vdda";
+        regulator-min-microvolt = <2900000>;
+        regulator-max-microvolt = <2900000>;
+        interrupts = <IT_CURLIM_LDO5 0>;
+        regulator-boot-on;
+      };
+
+      v1v2_hdmi: ldo6 {
+        regulator-name = "v1v2_hdmi";
+        regulator-min-microvolt = <1200000>;
+        regulator-max-microvolt = <1200000>;
+        regulator-always-on;
+        interrupts = <IT_CURLIM_LDO6 0>;
+      };
+
+      vref_ddr: vref_ddr {
+        regulator-name = "vref_ddr";
+        regulator-always-on;
+        regulator-over-current-protection;
+      };
+
+       bst_out: boost {
+        regulator-name = "bst_out";
+        interrupts = <IT_OCP_BOOST 0>;
+       };
+
+      vbus_otg: pwr_sw1 {
+        regulator-name = "vbus_otg";
+        interrupts = <IT_OCP_OTG 0>;
+       };
+
+       vbus_sw: pwr_sw2 {
+        regulator-name = "vbus_sw";
+        interrupts = <IT_OCP_SWOUT 0>;
+        regulator-active-discharge = <1>;
+       };
+    };
+
+    onkey {
+      compatible = "st,stpmic1-onkey";
+      interrupts = <IT_PONKEY_F 0>, <IT_PONKEY_R 0>;
+      interrupt-names = "onkey-falling", "onkey-rising";
+      power-off-time-sec = <10>;
+      status = "okay";
+    };
+
+    watchdog {
+      compatible = "st,stpmic1-wdt";
+      status = "disabled";
+    };
+  };
+	/* USER CODE END i2c4 */
+};
+
+&ipcc{
+	status = "okay";
+
+	/* USER CODE BEGIN ipcc */
+	/* USER CODE END ipcc */
+};
+
+&iwdg2{
+	status = "okay";
+
+	/* USER CODE BEGIN iwdg2 */
+  timeout-sec = <32>;
+	/* USER CODE END iwdg2 */
+};
+
+&m4_dma2{
+	status = "okay";
+
+	/* USER CODE BEGIN m4_dma2 */
+	/* USER CODE END m4_dma2 */
+};
+
+&m4_i2c1{
+	pinctrl-names = "default";
+	pinctrl-0 = <&m4_i2c1_pins_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN m4_i2c1 */
+	/* USER CODE END m4_i2c1 */
+};
+
+&m4_m_can1{
+	pinctrl-names = "default";
+	pinctrl-0 = <&m4_fdcan1_pins_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN m4_m_can1 */
+	/* USER CODE END m4_m_can1 */
+};
+
+&m4_spi4{
+	pinctrl-names = "default";
+	pinctrl-0 = <&m4_spi4_pins_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN m4_spi4 */
+	/* USER CODE END m4_spi4 */
+};
+
+&m4_spi5{
+	pinctrl-names = "default";
+	pinctrl-0 = <&m4_spi5_pins_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN m4_spi5 */
+	/* USER CODE END m4_spi5 */
+};
+
+&mdma1{
+	status = "okay";
+
+	/* USER CODE BEGIN mdma1 */
+	/* USER CODE END mdma1 */
+};
+
+&pwr_regulators{
+	status = "okay";
+
+	/* USER CODE BEGIN pwr_regulators */
+  vdd-supply = <&vdd>;
+  vdd_3v3_usbfs-supply = <&vdd_usb>;
+	/* USER CODE END pwr_regulators */
+};
+
+&rcc{
+	u-boot,dm-pre-reloc;
+	status = "okay";
+
+	/* USER CODE BEGIN rcc */
+	/* USER CODE END rcc */
+};
+
+&rng1{
+	status = "okay";
+
+	/* USER CODE BEGIN rng1 */
+	/* USER CODE END rng1 */
+};
+
+&rtc{
+	status = "okay";
+
+	/* USER CODE BEGIN rtc */
+	/* USER CODE END rtc */
+};
+
+&sdmmc1{
+	u-boot,dm-pre-reloc;
+	pinctrl-names = "default", "opendrain", "sleep";
+	pinctrl-0 = <&sdmmc1_pins_mx>;
+	pinctrl-1 = <&sdmmc1_opendrain_pins_mx>;
+	pinctrl-2 = <&sdmmc1_sleep_pins_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN sdmmc1 */
+  cd-gpios = <&gpiob 7 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
+  disable-wp;
+  st,neg-edge;
+  bus-width = <4>;
+  vmmc-supply = <&v3v3>;
+	/* USER CODE END sdmmc1 */
+};
+
+&tamp{
+	status = "okay";
+
+	/* USER CODE BEGIN tamp */
+	/* USER CODE END tamp */
+};
+
+&uart4{
+	u-boot,dm-pre-reloc;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&uart4_pins_mx>;
+	pinctrl-1 = <&uart4_sleep_pins_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN uart4 */
+  /delete-property/dmas;
+  /delete-property/dma-names;
+	/* USER CODE END uart4 */
+};
+
+&usart1{
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&usart1_pins_z_mx>;
+	pinctrl-1 = <&usart1_sleep_pins_z_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN usart1 */
+	/* USER CODE END usart1 */
+};
+
+&usbh_ehci{
+	status = "okay";
+
+	/* USER CODE BEGIN usbh_ehci */
+	/* USER CODE END usbh_ehci */
+};
+
+&usbh_ohci{
+	status = "okay";
+
+	/* USER CODE BEGIN usbh_ohci */
+	/* USER CODE END usbh_ohci */
+};
+
+&usbotg_hs{
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&usb_otg_hs_pins_mx>;
+	pinctrl-1 = <&usb_otg_hs_sleep_pins_mx>;
+	status = "okay";
+
+	/* USER CODE BEGIN usbotg_hs */
+	/* USER CODE END usbotg_hs */
+};
+
+&usbphyc{
+	status = "okay";
+
+	/* USER CODE BEGIN usbphyc */
+	/* USER CODE END usbphyc */
+};
+
+&usbphyc_port0{
+	status = "okay";
+
+	/* USER CODE BEGIN usbphyc_port0 */
+	/* USER CODE END usbphyc_port0 */
+};
+
+&usbphyc_port1{
+	status = "okay";
+
+	/* USER CODE BEGIN usbphyc_port1 */
+	/* USER CODE END usbphyc_port1 */
+};
+
+/* USER CODE BEGIN addons */
+&cpu0{
+	cpu-supply = <&vddcore>;
+};
+
+&cpu1{
+	cpu-supply = <&vddcore>;
+};
+
+&sram {
+	dma_pool: dma_pool@0 {
+		reg = <0x50000 0x10000>;
+		pool;
+	};
+};
+/* USER CODE END addons */
+
